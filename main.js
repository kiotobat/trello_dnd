(()=>{"use strict";class t{constructor(){this.memory={todo:[],progress:[],done:[]},this.drag=null}getId(){const t=Math.floor(1e6*Math.random());return[...this.memory.todo,...this.memory.progress,...this.memory.done].find(e=>e.id===t)?this.getId():t}create(t,e){this.memory[t].push({id:this.getId(),text:e})}read(t,e){return this.memory[e].find(e=>e.id===t)}delete(t,e){const s=this.memory[e].findIndex(e=>e.id===+t);this.memory[e].splice(s,1)}relocate(t,e){e&&[this.memory.todo,this.memory.progress,this.memory.done].forEach(s=>{if(s.find(e=>e.id===+t.dataset.id)){this.drag=s.find(e=>e.id===+t.dataset.id);const n=s.findIndex(t=>t.id===this.drag.id);s.splice(n,1);const a=this.memory[e.column].findIndex(t=>t.id===+e.id);e.id?this.memory[e.column].splice(a,0,this.drag):this.memory[e.column].push(this.drag)}})}saveState(){localStorage.setItem("memory",JSON.stringify(this.memory))}update(){localStorage.getItem("memory")&&(this.memory=JSON.parse(localStorage.getItem("memory")))}}class e{constructor(){this.data=new t,this.container=null,this.adding=null,this.texarea=null,this.onClick=this.onClick.bind(this)}bindToDOM(t){if(!(t instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=t}drawUI(){this.container.innerHTML=e.markUp,this.data.update(),this.redrawDOM()}redrawDOM(){document.querySelector('[data-id="111111"]')&&document.querySelector('[data-id="111111"]').remove(),document.querySelector('[data-id="000000"]')&&document.querySelector('[data-id="000000"]').remove(),this.redrawColumn(this.container.querySelector('[data-name="todo"]')),this.redrawColumn(this.container.querySelector('[data-name="progress"]')),this.redrawColumn(this.container.querySelector('[data-name="done"]')),document.body.style.cursor="auto"}toAppoint(){this.container.addEventListener("click",this.onClick)}onClick(t){return"col__add"===t.target.className||"col__addText"===t.target.className?this.onColAddClick(t):"add__cancel"===t.target.className?this.onColAddingCancelClick(t):"add__button"===t.target.className?this.addCard(t):"card__delete"===t.target.className?this.deleteCard(t):"card__subBtn"===t.target.className&&t.target.closest(".col__card").querySelector(".card__subMenu").classList.toggle("d_none")}deleteCard(t){const e=t.target.closest(".col__card").dataset.id,s=t.target.closest(".col__content");this.data.delete(e,s.dataset.name),this.redrawColumn(s),this.data.saveState()}addCard(t){this.textarea=t.target.closest(".col__footer").querySelector(".add__textarea");const e=this.textarea.value,s=t.target.closest(".trello__col").querySelector(".col__content");e&&(this.data.create(s.dataset.name,e),this.redrawColumn(s),this.textarea.value="",this.adding.classList.add("d_none"),this.data.saveState())}redrawColumn(t){this.column=t;const s=t.dataset.name;this.column.innerHTML="",this.data.memory[s].forEach(s=>{this.column.insertAdjacentHTML("beforeend",e.cardMarkUP(s.text,s.id)),this.checkScroll(t)})}checkScroll(t){this.column=t;const e=this.column.closest(".trello__col").querySelector(".scroll");this.column.offsetHeight>=555?e.classList.remove("d_none"):e.className="scroll d_none"}onColAddingCancelClick(t){this.adding.classList.add("d_none"),this.textarea=t.target.closest(".col__footer").querySelector(".add__textarea"),this.textarea.value=""}onColAddClick(t){[...this.container.querySelectorAll(".col__adding")].forEach(t=>t.classList.add("d_none")),this.adding=t.target.closest(".col__footer").querySelector(".col__adding"),this.adding.classList.remove("d_none");this.adding.querySelector(".add__textarea").focus()}static cardMarkUP(t,e){return`<div data-id="${e}" class="col__card card">\n    <button class="card__delete">&#10006;</button>\n    <div class="card__text">${t}</div>\n    <button class="card__subBtn"></button>\n    <span class="card__subMenu d_none">\n      <label class="subMenu__item">\n        <button class="like">&#x1F44D;</button>\n        <span class="quantity">1</span>\n      </label>\n      <label class="subMenu__item">\n        <button class="dizlike">&#128078;</button>\n        <span class="quantity">2</span>\n      </label>\n      <label class="subMenu__item">\n        <span class="mes"></span>\n        <span class="quantity">3</span>\n      </label>\n    </span>\n  </div>`}static get markUp(){return'<div class="trello">\n    <div class="trello__body">\n      <div class="trello__content">\n\n        <div class="trello__col col">\n          <div class="col__header">\n            <h3 class="col__title">TODO</h3>\n            <button class="col__menu"></button>\n          </div>\n          <div data-name="todo" class="col__content"></div>\n          <div class="col__footer">\n            <span class="scroll d_none"></span>\n            <button class="col__add">&#10010; <span class="col__addText">Add another card</span></button>\n            <div class="col__adding add d_none">\n              <textarea class="add__textarea" placeholder="Enter a title for this card..."></textarea>\n              <div class="add__controls">\n                <div class="add__buttons">\n                  <button class="add__button">Add Card</button>\n                  <button class="add__cancel">&#10006;</button>\n                </div>\n                <button class="col__menu"></button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class="trello__col col">\n          <div class="col__header">\n            <h3 class="col__title">IN PROGRESS</h3>\n            <button class="col__menu"></button>\n          </div>\n          <div data-name="progress" class="col__content"></div>\n          <div class="col__footer">\n            <span class="scroll d_none"></span>\n            <button class="col__add">&#10010; <span class="col__addText">Add another card</span></button>\n            <div class="col__adding add d_none">\n              <textarea class="add__textarea" placeholder="Enter a title for this card..."></textarea>\n              <div class="add__controls">\n                <div class="add__buttons">\n                  <button class="add__button">Add Card</button>\n                  <button class="add__cancel">&#10006;</button>\n                </div>\n                <button class="col__menu"></button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class="trello__col col">\n          <div class="col__header">\n            <h3 class="col__title">DONE</h3>\n            <button class="col__menu"></button>\n          </div>\n          <div data-name="done" class="col__content"></div>\n          <div class="col__footer">\n            <span class="scroll d_none"></span>\n            <button class="col__add">&#10010; <span class="col__addText">Add another card</span></button>\n            <div class="col__adding add d_none">\n              <textarea class="add__textarea" placeholder="Enter a title for this card..."></textarea>\n              <div class="add__controls">\n                <div class="add__buttons">\n                  <button class="add__button">Add Card</button>\n                  <button class="add__cancel">&#10006;</button>\n                </div>\n                <button class="col__menu"></button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>'}}const s=new e;s.bindToDOM(document.querySelector(".container")),s.drawUI(),s.toAppoint();const n=new class{constructor(t){this.trello=t,this.container=t.container,this.data=t.data,this.draggedEl=null,this.ghostEl=null,this.shiftX=0,this.shiftY=0,this.id=null,this.clone=null,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onMouseLeave=this.onMouseLeave.bind(this)}toAppoint(){this.container.addEventListener("mousedown",this.onMouseDown),this.container.addEventListener("mouseup",this.onMouseUp),this.container.querySelector(".trello__body").addEventListener("mouseleave",this.onMouseLeave)}onMouseLeave(){this.draggedEl&&this.cleanupDrag()}onMouseUp(t){if(!this.draggedEl)return;const e=document.elementFromPoint(t.clientX,t.clientY);if(e?.closest(".card__delete"))return void this.cleanupDrag();const s=document.querySelector('[data-id="000000"]');if(s){const t={id:s.nextElementSibling?.dataset.id||null,column:s.closest(".col__content").dataset.name};this.data.relocate(this.draggedEl,t),s.replaceWith(this.draggedEl)}this.trello.data.saveState(),this.cleanupDrag()}onMouseMove(t){this.draggedEl&&(t.preventDefault(),this.ghostEl.style.left=t.pageX-this.shiftX+"px",this.ghostEl.style.top=t.pageY-this.shiftY+"px",this.addGhostEl(t))}addGhostEl(t){const e=document.querySelector('[data-id="000000"]');this.ghostEl.hidden=!0;const s=document.elementFromPoint(t.clientX,t.clientY);this.ghostEl.hidden=!1;const n=s?.closest(".col__content");if(!n)return void(e&&e.remove());if(0===Array.from(n.querySelectorAll('.col__card:not([data-id="000000"])')).length)return void(e&&e.parentElement===n||(e&&e.remove(),this.createPlaceholder(n,null,!0)));const a=s.closest(".col__card");if(a&&a.dataset.id!==this.id){const s=a.getBoundingClientRect(),o=t.clientY>s.top+s.height/2;if(e&&(o&&e.previousElementSibling===a||!o&&e.nextElementSibling===a))return;e&&e.remove(),this.createPlaceholder(n,o?a.nextSibling:a)}}createPlaceholder(t,e=null,s=!1){this.clone=document.createElement("div"),this.clone.dataset.id="000000",s?(this.clone.style.height="50px",this.clone.style.border="2px dashed #aaa",this.clone.style.borderRadius="6px",this.clone.style.margin="5px"):(this.clone=this.draggedEl.cloneNode(!0),this.clone.dataset.id="000000",this.clone.style.opacity="0.3"),this.clone.style.pointerEvents="none",t.insertBefore(this.clone,e)}onMouseDown(t){if(!t.target.closest(".col__card")||t.target.classList.contains("card__delete")||t.target.classList.contains("card__subBtn"))return;t.preventDefault(),document.body.style.userSelect="none",this.draggedEl=t.target.closest(".col__card"),this.id=this.draggedEl.dataset.id;const e=this.draggedEl.getBoundingClientRect();this.shiftX=t.clientX-e.left,this.shiftY=t.clientY-e.top,this.ghostEl=this.draggedEl.cloneNode(!0),this.ghostEl.classList.add("dragged"),Object.assign(this.ghostEl.style,{width:`${this.draggedEl.offsetWidth}px`,position:"absolute",zIndex:1e3,pointerEvents:"none",left:`${e.left}px`,top:`${e.top}px`}),document.body.appendChild(this.ghostEl),this.draggedEl.classList.add("darkened");const s=this.draggedEl.cloneNode(!0);s.dataset.id="000000",s.style.opacity="0.3",this.draggedEl.parentElement.insertBefore(s,this.draggedEl),this.draggedEl.remove(),document.body.style.cursor="grabbing",this.container.addEventListener("mousemove",this.onMouseMove)}cleanupDrag(){this.ghostEl&&this.ghostEl.remove(),document.querySelectorAll('[data-id="000000"]').forEach(t=>t.remove()),document.body.style.cursor="auto",document.body.style.userSelect="",this.container.removeEventListener("mousemove",this.onMouseMove),this.draggedEl&&this.draggedEl.classList.remove("darkened"),this.draggedEl=null,this.ghostEl=null}}(s);n.toAppoint()})();